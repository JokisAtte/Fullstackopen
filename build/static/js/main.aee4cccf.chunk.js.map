{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Person","props","name","phone","del","DeleteButton","onClick","Notification","message","className","Error","PersonsForm","toShow","persons","filter","person","toUpperCase","includes","search","map","key","number","FilterForm","value","newSearch","onChange","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","setNewSearch","notification","setNotification","errormsg","setErrormsg","useEffect","personService","then","response","data","event","target","onSubmit","preventDefault","personObject","window","confirm","find","p","changedObject","setTimeout","console","log","concat","type","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aee4cccf.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl,newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst deleteContact = id => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    deleteContact: deleteContact\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './index.css'\r\nimport personService from './services/persons'\r\n\r\n\r\nconst Person = (props) => {\r\n  return(\r\n      <p>\r\n          {props.name} {props.phone}\r\n          <DeleteButton id = {props.id} name = {props.name} del={props.del} />\r\n      </p>\r\n    )\r\n}\r\n\r\nconst DeleteButton = (props) => {\r\n  const call = () => {\r\n    props.del(props)\r\n  }\r\n  return(\r\n    <button onClick = {call}>delete</button>\r\n  )\r\n}\r\n\r\nconst Notification = ({message}) => {\r\n  if (message === '') {\r\n    return null\r\n  }\r\n\r\n  return(\r\n    <div className=\"notification\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Error = ({message}) => {\r\n  if (message === ''){\r\n    return null\r\n  }\r\n\r\n  return(\r\n    <div className = \"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PersonsForm = (props) => {\r\n  const toShow = props.persons.filter(person =>\r\n    person.name.toUpperCase().includes(props.search.toUpperCase()) === true)\r\n  return(\r\n    <div>\r\n    <h2>Numbers</h2>\r\n    {toShow.map((person) => \r\n    <Person \r\n      key = {person.name} \r\n      id = {person.id} \r\n      name = {person.name} \r\n      phone = {person.number}\r\n      del = {props.del}\r\n    />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst FilterForm =(props) => {\r\n  return(\r\n    <div>\r\n    filter shown with: <input value = {props.newSearch} onChange = {props.onChange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName ] = useState('')\r\n  const [newPhone, setNewPhone] = useState('')\r\n  const [newSearch, setNewSearch] = useState('')\r\n  const [notification, setNotification] = useState('')\r\n  const [errormsg, setErrormsg] = useState('')\r\n\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(response => {\r\n        setPersons(response.data)\r\n    })\r\n  },[])\r\n\r\n  //Deletes a contact\r\n  const handleDelete = (person) => {\r\n    let wantToDelete = window.confirm(`Delete ${person.name}?`)\r\n    if(wantToDelete){\r\n      personService\r\n        .deleteContact(person.id)\r\n        .then(() => {\r\n          personService.getAll()\r\n            .then(response => {\r\n              setPersons(response.data)\r\n            })\r\n            setNotification(`${person.name} deleted`)\r\n        })\r\n        .catch(error => {\r\n          setErrormsg(`information of ${person.name} has already been deleted from the server`)\r\n          setTimeout( () => {\r\n            setErrormsg('')\r\n          }, 3000)\r\n        })\r\n        setTimeout(() => {\r\n          setNotification('')\r\n        },3000)\r\n    }\r\n  }\r\n\r\n  //This handles new contacts\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n\r\n    const personObject = {\r\n      name: newName,\r\n      number: newPhone\r\n      }\r\n\r\n    const names = persons.map(person => person.name)\r\n    if(!names.includes(newName)){\r\n      console.log('lisätään ', personObject)\r\n      personService\r\n      .create(personObject)\r\n      .then(response => {\r\n        console.log('Setting persons to:')\r\n        console.log(persons.concat(personObject))\r\n        setPersons(persons.concat(personObject))\r\n      })\r\n      setNotification(`${personObject.name} added`)\r\n      setTimeout(() => {\r\n        setNotification('')\r\n      },3000)\r\n    } else {\r\n      if (window.confirm(`${newName} is already added to phonebook. Replace the old number with new one?`)){\r\n        const person = persons.find(p => p.name === newName)\r\n        const changedObject = {... person, number : newPhone }\r\n        personService\r\n          .update(person.id, changedObject)\r\n          .then(response => {\r\n            setPersons(persons.map(p => p.id !== changedObject.id ? p : response.data))\r\n          })\r\n        setNotification(`${personObject.name}'s number updated`)\r\n        setTimeout(() => {\r\n          setNotification('')\r\n        },3000)\r\n      }\r\n    }\r\n\r\n    setNewName('')\r\n    setNewPhone('')\r\n  }\r\n\r\n  const handleNewName = (event) =>{\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNewPhone = (event) => {\r\n      setNewPhone(event.target.value)\r\n  }\r\n\r\n  const handleNewSearch = (event) => {\r\n    setNewSearch(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Notification message = {notification} />\r\n      <Error message = {errormsg} />\r\n      <h2>Phonebook</h2>\r\n        <FilterForm value = {newSearch} onChange = {handleNewSearch}/>\r\n      <h2>add a new</h2>\r\n      <form onSubmit = {addName}>\r\n        <div>\r\n          name: <input value ={newName} onChange ={handleNewName} />\r\n        </div>\r\n        <div>\r\n            number: <input value = {newPhone} onChange = {handleNewPhone}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n      <PersonsForm\r\n        persons = {persons}\r\n        search = {newSearch}\r\n        del = {handleDelete}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}